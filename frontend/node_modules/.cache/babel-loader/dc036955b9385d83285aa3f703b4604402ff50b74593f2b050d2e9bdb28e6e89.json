{"ast":null,"code":"const board = [['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'], ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['', '', '', '', '', '', '', ''], ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'], ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R']];\n\n// pawn move validation\nfunction isValidPawnMove(from, to, piece) {\n  const [fromCol, fromRow] = from;\n  const [toCol, toRow] = to;\n  const direction = piece === 'P' ? -1 : 1;\n  const startRow = piece === 'P' ? 6 : 1;\n  console.log(fromCol, fromRow, toCol, toRow);\n  if (toCol === fromCol) {\n    // Regular move\n    if (board[toRow][toCol] === '') {\n      if (toRow === fromRow + direction) return true;\n      if (fromRow === startRow && toRow === fromRow + 2 * direction && board[fromRow + direction][fromCol] === '') return true;\n    }\n  } else if (Math.abs(toCol - fromCol) === 1) {\n    // Capture\n    if (board[toRow][toCol] !== '' && isOpponentPiece(toRow, toCol, piece)) {\n      return toRow === fromRow + direction;\n    }\n  }\n  return false;\n}\n\n// valid rook move\nfunction isValidRookMove(from, to) {\n  const [fromCol, fromRow] = from;\n  const [toCol, toRow] = to;\n  if (fromRow !== toRow && fromCol !== toCol) return false;\n  if (fromRow === toRow) {\n    const step = fromCol < toCol ? 1 : -1;\n    for (let col = fromCol + step; col !== toCol; col += step) {\n      if (board[fromRow][col] !== '') return false;\n    }\n  } else {\n    const step = fromRow < toRow ? 1 : -1;\n    for (let row = fromRow + step; row !== toRow; row += step) {\n      if (board[row][fromCol] !== '') return false;\n    }\n  }\n  return true;\n}\n// valid knight move\nfunction isValidKnightMove(from, to) {\n  const [fromCol, fromRow] = from;\n  const [toRow, toCol] = to;\n  const rowDiff = Math.abs(fromRow - toRow);\n  const colDiff = Math.abs(fromCol - toCol);\n  return rowDiff === 2 && colDiff === 1 || rowDiff === 1 && colDiff === 2;\n}\n// valid bishop move\nfunction isValidBishopMove(from, to) {\n  const [fromRow, fromCol] = from;\n  const [toRow, toCol] = to;\n  if (Math.abs(fromRow - toRow) !== Math.abs(fromCol - toCol)) return false;\n  const rowStep = fromRow < toRow ? 1 : -1;\n  const colStep = fromCol < toCol ? 1 : -1;\n  let row = fromRow + rowStep;\n  let col = fromCol + colStep;\n  while (row !== toRow && col !== toCol) {\n    if (board[row][col] !== '') return false;\n    row += rowStep;\n    col += colStep;\n  }\n  return true;\n}\n// valid queen move\nfunction isValidQueenMove(from, to) {\n  return isValidRookMove(from, to) || isValidBishopMove(from, to);\n}\n// valid king move\nfunction isValidKingMove(from, to) {\n  const [fromRow, fromCol] = from;\n  const [toRow, toCol] = to;\n  const rowDiff = Math.abs(fromRow - toRow);\n  const colDiff = Math.abs(fromCol - toCol);\n  return rowDiff <= 1 && colDiff <= 1;\n}\n// check opponentpiece\nfunction isOpponentPiece(row, col, piece) {\n  const targetPiece = board[row][col];\n  if (targetPiece === '') return false;\n  return piece === piece.toUpperCase() && targetPiece === targetPiece.toLowerCase() || piece === piece.toLowerCase() && targetPiece === targetPiece.toUpperCase();\n}\n// check validity\n\nexport function isValidMove(from, to, piece) {\n  switch (piece.toLowerCase()) {\n    case 'p':\n      return isValidPawnMove(from, to, piece);\n    case 'r':\n      return isValidRookMove(from, to);\n    case 'n':\n      return isValidKnightMove(from, to);\n    case 'b':\n      return isValidBishopMove(from, to);\n    case 'q':\n      return isValidQueenMove(from, to);\n    case 'k':\n      return isValidKingMove(from, to);\n    default:\n      return false;\n  }\n}","map":{"version":3,"names":["board","isValidPawnMove","from","to","piece","fromCol","fromRow","toCol","toRow","direction","startRow","console","log","Math","abs","isOpponentPiece","isValidRookMove","step","col","row","isValidKnightMove","rowDiff","colDiff","isValidBishopMove","rowStep","colStep","isValidQueenMove","isValidKingMove","targetPiece","toUpperCase","toLowerCase","isValidMove"],"sources":["/home/blackbird/Documents/chessgame/frontend/src/logic.js"],"sourcesContent":["const board = [\n  ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'],\n  ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['', '', '', '', '', '', '', ''],\n  ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],\n  ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R']\n];\n\n// pawn move validation\nfunction isValidPawnMove(from, to, piece) {\n  const [fromCol,fromRow] = from;\n  const [toCol,toRow ] = to;\n  const direction = piece === 'P' ? -1 : 1;\n  const startRow = piece === 'P' ? 6 : 1;\nconsole.log(fromCol,fromRow,toCol,toRow);\n  if (toCol === fromCol) {\n    // Regular move\n    if (board[toRow][toCol] === '') {\n      if (toRow === fromRow + direction) return true;\n      if (fromRow === startRow && toRow === fromRow + 2 * direction && board[fromRow + direction][fromCol] === '') return true;\n    }\n  } else if (Math.abs(toCol - fromCol) === 1) {\n    // Capture\n    if (board[toRow][toCol] !== '' && isOpponentPiece(toRow, toCol, piece)) {\n      return toRow === fromRow + direction;\n    }\n  }\n\n  return false;\n}\n\n// valid rook move\nfunction isValidRookMove(from, to) {\n  const [fromCol,fromRow] = from;\n  const [toCol,toRow] = to;\n\n  if (fromRow !== toRow && fromCol !== toCol) return false;\n\n  if (fromRow === toRow) {\n    const step = fromCol < toCol ? 1 : -1;\n    for (let col = fromCol + step; col !== toCol; col += step) {\n      if (board[fromRow][col] !== '') return false;\n    }\n  } else {\n    const step = fromRow < toRow ? 1 : -1;\n    for (let row = fromRow + step; row !== toRow; row += step) {\n      if (board[row][fromCol] !== '') return false;\n    }\n  }\n\n  return true;\n}\n// valid knight move\nfunction isValidKnightMove(from, to) {\n  const [fromCol,fromRow, ] = from;\n  const [toRow, toCol] = to;\n\n  const rowDiff = Math.abs(fromRow - toRow);\n  const colDiff = Math.abs(fromCol - toCol);\n\n  return (rowDiff === 2 && colDiff === 1) || (rowDiff === 1 && colDiff === 2);\n}\n// valid bishop move\nfunction isValidBishopMove(from, to) {\n  const [fromRow, fromCol] = from;\n  const [toRow, toCol] = to;\n\n  if (Math.abs(fromRow - toRow) !== Math.abs(fromCol - toCol)) return false;\n\n  const rowStep = fromRow < toRow ? 1 : -1;\n  const colStep = fromCol < toCol ? 1 : -1;\n\n  let row = fromRow + rowStep;\n  let col = fromCol + colStep;\n  while (row !== toRow && col !== toCol) {\n    if (board[row][col] !== '') return false;\n    row += rowStep;\n    col += colStep;\n  }\n\n  return true;\n}\n// valid queen move\nfunction isValidQueenMove(from, to) {\n  return isValidRookMove(from, to) || isValidBishopMove(from, to);\n}\n// valid king move\nfunction isValidKingMove(from, to) {\n  const [fromRow, fromCol] = from;\n  const [toRow, toCol] = to;\n\n  const rowDiff = Math.abs(fromRow - toRow);\n  const colDiff = Math.abs(fromCol - toCol);\n\n  return rowDiff <= 1 && colDiff <= 1;\n}\n// check opponentpiece\nfunction isOpponentPiece(row, col, piece) {\n  const targetPiece = board[row][col];\n  if (targetPiece === '') return false;\n\n  return (piece === piece.toUpperCase() && targetPiece === targetPiece.toLowerCase()) ||\n         (piece === piece.toLowerCase() && targetPiece === targetPiece.toUpperCase());\n}\n// check validity\n\nexport function isValidMove(from, to, piece) {\n  switch (piece.toLowerCase()) {\n    case 'p': return isValidPawnMove(from, to, piece);\n    case 'r': return isValidRookMove(from, to);\n    case 'n': return isValidKnightMove(from, to);\n    case 'b': return isValidBishopMove(from, to);\n    case 'q': return isValidQueenMove(from, to);\n    case 'k': return isValidKingMove(from, to);\n    default: return false;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}